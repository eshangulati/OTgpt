/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/wCGyFd8cBKa
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
'use client';
import React, {useState} from "react";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"

export default function Chat() {

  const [messages, setMessages] = useState([
    { id: 1, text: "Hello! I'm your Occupational Therapist AI. How can I assist you today?", sender: 'bot' },
    { id: 2, text: "Hi Occupational Therapist AI, I'm having trouble with my daily routine and need some help.", sender: 'user' }
  ]);
  const [input, setInput] = useState('');
  
  // Function to handle input change
  const handleInputChange = (e) => {
    setInput(e.target.value);
  };
  
  // Function to handle sending a message
  const handleSendMessage = () => {
    if (input.trim()) {
      const newMessage = {
        id: messages.length + 1,
        text: input,
        sender: 'user'
      };
      setMessages([...messages, newMessage]); // Add new message to state
      setInput(''); // Clear input field
    }
  };

  return (
    <div className="flex flex-col h-screen">
      <header className="bg-primary text-primary-foreground py-4 px-6 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <BotIcon className="h-6 w-6" />
          <span className="font-bold text-xl">Occupational Therapist AI</span>
        </div>
        <Avatar className="border-2 border-primary-foreground">
          <AvatarImage src="/placeholder-user.jpg" />
          <AvatarFallback>OT</AvatarFallback>
        </Avatar>
      </header>
      <div className="flex h-full">
        <div className="bg-muted/20 border-r w-64 p-6 flex flex-col justify-between">
          <div className="space-y-4">
            {/* Mapping over messages to display each one */}
            {messages.map((message) => (
              <div key={message.id} className="flex items-center gap-2">
                <Avatar className="w-10 h-10 border">
                  <AvatarImage src="/placeholder-user.jpg" />
                  <AvatarFallback>{message.sender === 'user' ? 'YO' : 'OT'}</AvatarFallback>
                </Avatar>
                <div className="grid gap-1 text-sm">
                  <div className="font-semibold">{message.sender === 'user' ? 'You' : 'Occupational Therapist'}</div>
                  <div className="text-xs text-muted-foreground">Just now</div>
                  <div className="prose text-muted-foreground">
                    <p>{message.text}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
        <div className="flex-1 overflow-auto p-6">
          {/* Additional chat elements could go here */}
        </div>
      </div>
      <div className="bg-background border-t px-6 py-4 flex items-center">
        <Textarea
          placeholder="Type your message..."
          className="flex-1 rounded-xl border-neutral-400 shadow-sm p-3 resize-none"
          rows={1}
          value={input}
          onChange={handleInputChange}
        />
        <Button type="submit" size="icon" className="ml-2" onClick={handleSendMessage} disabled={!input.trim()}>
          <ArrowUpIcon className="w-5 h-5" />
          <span className="sr-only">Send</span>
        </Button>
      </div>
    </div>
  )
}

function ArrowUpIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m5 12 7-7 7 7" />
      <path d="M12 19V5" />
    </svg>
  )
}


function BotIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 8V4H8" />
      <rect width="16" height="12" x="4" y="8" rx="2" />
      <path d="M2 14h2" />
      <path d="M20 14h2" />
      <path d="M15 13v2" />
      <path d="M9 13v2" />
    </svg>
  )
}


function LogOutIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4" />
      <polyline points="16 17 21 12 16 7" />
      <line x1="21" x2="9" y1="12" y2="12" />
    </svg>
  )
}


function SettingsIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" />
      <circle cx="12" cy="12" r="3" />
    </svg>
  )
}


function XIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
